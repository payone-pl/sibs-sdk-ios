// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7.2 (swiftlang-5.7.2.135.5 clang-1400.0.29.51)
// swift-module-flags: -target arm64-apple-ios13.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name SibsSDK
// swift-module-flags-ignorable: -enable-bare-slash-regex
import Foundation
@_exported import SibsSDK
import Swift
import UIKit
import WebKit
import _Concurrency
import _StringProcessing
public class SDK {
  public init(_ config: SDKConfig)
  public func startPayment(from viewController: UIKit.UIViewController, with data: TransactionParams, completion: PaymentResult)
  public func check(transactionID: Swift.String, completion: @escaping CheckResult)
  @objc deinit
}
public struct SDKConfig {
  public let baseURL: Swift.String
  public let webURL: Swift.String
  public let clientID: Swift.String
  public let token: Swift.String
  public let language: Language
  public init(baseURL: Swift.String, webURL: Swift.String, clientID: Swift.String, token: Swift.String, language: Language)
}
extension Address {
  public class Builder {
    public init()
    public func street1(_ value: Swift.String) -> Self
    public func street2(_ value: Swift.String) -> Self
    public func city(_ value: Swift.String) -> Self
    public func postcode(_ value: Swift.String) -> Self
    public func country(_ value: Swift.String) -> Self
    public func build() throws -> Address
    @objc deinit
  }
}
extension TokenizationParams {
  public class Builder {
    public init()
    public func tokenizeCard(_ value: Swift.Bool) -> Self
    public func cardTokens(_ value: [Token]?) -> Self
    public func build() -> TokenizationParams
    @objc deinit
  }
}
public struct Execution : Swift.Codable {
  public let startTime: Swift.String
  public let endTime: Swift.String
  public init(startTime: Swift.String, endTime: Swift.String)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public enum Currency : Swift.Codable {
  case pln
  case eur
  case custom(_: Swift.String)
  public var code: Swift.String {
    get
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
extension Currency : Swift.CaseIterable {
  public static var allCases: [Currency]
  public typealias AllCases = [Currency]
}
extension Currency {
  public init?(code: Swift.String)
}
extension TransactionParams {
  public class Builder {
    public init()
    public func terminalID(_ value: Swift.Int) -> Self
    public func transactionID(_ value: Swift.String) -> Self
    public func transactionDescription(_ value: Swift.String) -> Self
    public func amount(_ value: Swift.Double) -> Self
    public func currency(_ value: Currency) -> Self
    public func paymentMethods(_ value: [PaymentMethod]) -> Self
    public func client(_ value: Swift.String?) -> Self
    public func email(_ value: Swift.String?) -> Self
    public func shopURL(_ value: Swift.String) -> Self
    public func shippingAddress(_ value: Address) -> Self
    public func billingAddress(_ value: Address) -> Self
    public func tokenizationParams(_ value: TokenizationParams?) -> Self
    public func build() throws -> TransactionParams
    @objc deinit
  }
}
public struct TransactionResult : Swift.Codable {
  public let isSuccess: Swift.Bool
  public let transactionID: Swift.String?
  public let token: Token?
  public init(isSuccess: Swift.Bool, transactionID: Swift.String?, token: Token?)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
extension TransactionResult {
  public init(_ data: TransactionStatus)
}
public struct ReturnStatus : Swift.Codable {
  public let statusCode: Swift.String
  public let statusMsg: Swift.String
  public let statusDescription: Swift.String
  public init(statusCode: Swift.String, statusMsg: Swift.String, statusDescription: Swift.String)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public typealias PaymentResult = ((Swift.Result<TransactionResult, Swift.Error>) -> Swift.Void)?
public typealias CheckResult = (Swift.Result<TransactionStatus, Swift.Error>) -> Swift.Void
public struct Amount : Swift.Codable {
  public let currency: Swift.String
  public let value: Swift.Double
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public enum BuilderError : Swift.Error, Foundation.LocalizedError {
  case incorrectParameter(_: Swift.String?)
  public var errorDescription: Swift.String? {
    get
  }
}
public struct Merchant : Swift.Codable {
  public let merchantTransactionID: Swift.String
  public let terminalID: Swift.String
  public init(merchantTransactionID: Swift.String, terminalID: Swift.String)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public enum PaymentStatus : Swift.String, Swift.Codable {
  case success
  case partial
  case declined
  case inProcessing
  case pending
  case timeout
  case error
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
extension PaymentStatus {
  public var isAllowedStatus: Swift.Bool {
    get
  }
  public var allowedStatuses: [PaymentStatus] {
    get
  }
}
public enum SibsSDKError : Swift.Error {
  case sdkNotConfigured(_: Swift.String? = nil)
  case canceledByUser
}
extension SibsSDKError : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
public struct Token : Swift.Codable {
  public let name: Swift.String?
  public let type: Swift.String
  public let value: Swift.String
  public let maskedPAN: Swift.String?
  public let expireDate: Swift.String?
  public init(name: Swift.String? = nil, type: Swift.String, value: Swift.String, maskedPAN: Swift.String? = nil, expireDate: Swift.String? = nil)
  public init(type: Swift.String, value: Swift.String)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct TransactionParams : Swift.Codable {
  public let merchant: MerchantDTO
  public let transaction: TransactionDTO
  public let customer: Customer?
  public let tokenizationParams: TokenizationParams?
  public init(merchant: MerchantDTO, transaction: TransactionDTO, customer: Customer? = nil, tokenizationParams: TokenizationParams? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct MerchantDTO : Swift.Codable {
  public let terminalID: Swift.Int
  public let channel: Swift.String
  public let merchantTransactionID: Swift.String
  public let transactionDescription: Swift.String
  public let shopURL: Swift.String?
  public init(terminalID: Swift.Int, channel: Swift.String, merchantTransactionID: Swift.String, transactionDescription: Swift.String, shopURL: Swift.String?)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct Customer : Swift.Codable {
  public let customerInfo: CustomerInfo
  public init(customerInfo: CustomerInfo)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct CustomerInfo : Swift.Codable {
  public let customerName: Swift.String?
  public let customerEmail: Swift.String?
  public let shippingAddress: Address?
  public let billingAddress: Address?
  public init(customerName: Swift.String?, customerEmail: Swift.String?, shippingAddress: Address?, billingAddress: Address?)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct Address : Swift.Codable {
  public let street1: Swift.String
  public let street2: Swift.String?
  public let city: Swift.String
  public let postcode: Swift.String
  public let country: Swift.String
  public init(street1: Swift.String, street2: Swift.String?, city: Swift.String, postcode: Swift.String, country: Swift.String)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct TransactionDTO : Swift.Codable {
  public let transactionTimestamp: Swift.String
  public let transactionDescription: Swift.String
  public let paymentType: Swift.String
  public let amount: AmountDTO
  public let paymentMethod: [Swift.String]
  public init(transactionTimestamp: Swift.String, transactionDescription: Swift.String, paymentType: Swift.String, amount: AmountDTO, paymentMethod: [Swift.String])
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct AmountDTO : Swift.Codable {
  public let value: Swift.Double
  public let currency: Swift.String
  public init(value: Swift.Double, currency: Swift.String)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct TransactionStatus : Swift.Codable {
  public let merchant: Merchant
  public let transactionID: Swift.String
  public let paymentType: Swift.String
  public let paymentStatus: PaymentStatus
  public let paymentMethod: Swift.String
  public let execution: Execution
  public let returnStatus: ReturnStatus
  public let token: Token?
  public init(merchant: Merchant, transactionID: Swift.String, paymentType: Swift.String, paymentStatus: PaymentStatus, paymentMethod: Swift.String, execution: Execution, returnStatus: ReturnStatus, token: Token?)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public enum PaymentMethod : Swift.String, Swift.Codable, Swift.CaseIterable {
  case applePay
  case blik
  case card
  case payByLink
  case pblkv
  public init?(rawValue: Swift.String)
  public typealias AllCases = [PaymentMethod]
  public typealias RawValue = Swift.String
  public static var allCases: [PaymentMethod] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
public struct TokenizationParams : Swift.Codable {
  public let tokenizeCard: TokenizationRequest
  public let tokens: [Token]
  public init(tokenizeCard: TokenizationRequest, tokens: [Token])
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct TokenizationRequest : Swift.Codable {
  public let tokenizeCard: Swift.Bool
  public init(tokenizeCard: Swift.Bool)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public enum Language : Swift.Codable {
  case en
  case pl
  case custom(_: Swift.String)
  public var code: Swift.String {
    get
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
extension Language : Swift.CaseIterable {
  public static var allCases: [Language]
  public typealias AllCases = [Language]
}
extension Language {
  public init?(code: Swift.String)
}
extension PaymentStatus : Swift.Equatable {}
extension PaymentStatus : Swift.Hashable {}
extension PaymentStatus : Swift.RawRepresentable {}
extension PaymentMethod : Swift.Equatable {}
extension PaymentMethod : Swift.Hashable {}
extension PaymentMethod : Swift.RawRepresentable {}
